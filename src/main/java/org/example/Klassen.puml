@startuml
'https://plantuml.com/sequence-diagram

class User {
    - username : String
    - password : String
    - token : String
    - stack: Stack
    - deck: Deck
    - profile: Profile
    - coins: Double
    - eloScore: Integer
    - wins : Integer
    - losses : Integer
    + void tradeCard(Card card, Requirement requirement)
    + void buyPackage(Package newPackage)
    + void selectBestCards()
    + void register()
    + void login()
    + void viewScores()
    + void viewProfile()
    + void editProfile()
    + void requestTrade(Card card, Requirement requirement)
    + void acceptTrade(TradeDeal tradeDeal)
}

class Store {
    - tradeDeals: TradeDeal[]
    + void addTradeDeal(TradeDeal tradeDeal)
    + void removeTradeDeal(TradeDeal tradeDeal)
    + void displayAvailableTrades()
}

class TradeDeal {
    - id: UUID
    - offeringUser: User
    - offeredCard: Card
    - requirement: Requirement
    - status: String
}

class Profile {
    - name : String
    - bio : String
    - image : String
    + void displayProfile()
}

enum CardName {
    WaterGoblin, FireGoblin, RegularGoblin,
    WaterTroll, FireTroll, RegularTroll,
    WaterElf, FireElf, RegularElf,
    WaterSpell, FireSpell, RegularSpell,
    Knight, Dragon, Ork, Kraken
}

abstract class Card {
    # Id : UUID
    # name : CardName
    # damage : Double
    # elementType: ElementType
    # specialties: String[]
    # cardType: CardType
    # ownerUsername: String
    + void getAttributes()
    + void displayCardInfo()
    + void upgradeCard(Double upgradeAmount)
    + Double calculateEffectiveDamage(Card opponentCard)
    + String specialtiesToString()
}

class SpellCard {
    + void displayCardInfo()
    + Double calculateEffectiveDamage(Card opponentCard)
}

class MonsterCard {
    + void displayCardInfo()
    + Double calculateEffectiveDamage(Card opponentCard)
}

class Stack{
    - stackCards: Card[]
    + void removeCard(Card card)
    + void attainCard(Card card)
}

class Package {
    - packageCards: Card[5]
    + void openPackage()
    + void displayPackageInfo()
    + UUID generateRandomId()
    + CardName generateRandomName()
    + Double generateRandomDamage()
    + ElementType generateRandomElementType()
}

class Deck {
    - bestCards: Card[4]
    + void addCardToDeck(Card card)
    + void removeCardFromDeck(Card card)
    + void reorganizeDeck()
    + void getBestCards()
}

enum ElementType {
    WATER
    FIRE
    NORMAL
}

class Requirement {
    - cardType: CardType
    - minDamage: Integer
    + satisfiesRequirement(Card card)
}

enum CardType {
    MONSTER
    SPELL
}

class GameController {
    - users: User[]
    - battles: Battle[]
    + void initiateBattle(User user1, User user2)
}

class Round {
    - roundId: UUID
    - battle: Battle
    - roundNumber: Integer
    - winner: String
    - loser: String
    - draw: boolean
    - roundDetail: RoundDetail
}

class RoundDetail {
    - roundId: UUID
    - card: Card
    - player: User
}

class Battle {
    - id: UUID
    - user1Username: String
    - user2Username: String
}

Card <|-- MonsterCard
Card <|-- SpellCard

User "1" -- "1..*" Card : owns
User "1" -- "1" Stack : owns
User "1" -- "1" Deck : owns
User "1" -- "1" Profile : has
User "1" -- "1..*" Package : canAcquire
User "1" -- "1..*" TradeDeal : able to carry out
User "1" -- "1..*" Battle : able to initiate

Stack "1" o-- "1..*" Card : contains
Package "1" o-- "1..*" Card : contains
Deck "1" o-- "1..*" Card : contains

Battle "1" o-- "2" Deck : isFoughtWith
Battle "1" o-- "2" User : isFoughtBy

GameController "1" o-- "1..*" User : manages
GameController "1" o-- "1..*" Card : manages
GameController "1" o-- "1..*" Battle : manages

Card -- CardName : has
Card -- CardType : has
Card -- ElementType : has
Requirement -- CardType : has

Round "1" o-- "2" Card : includes
Round "1" o-- "2" User : includes
Round -- Battle : belongs to
Round -- RoundDetail : has

RoundDetail "1" -- "1" Card : contains
RoundDetail "1" -- "1" User : player

TradeDeal -- User : offeringUser
TradeDeal -- Card : offeredCard
TradeDeal -- Requirement : requirement

Store "1" -- "0..*" TradeDeal : tradeDeals

@enduml
