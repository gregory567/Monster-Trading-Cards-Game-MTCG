@startuml
'https://plantuml.com/sequence-diagram

class User {
    - username : String
    - password : String
    - coins: double
    - stack: Stack
    - deck: Deck
    - profile: Profile
    - battleResults: BattleResult[]
    + void tradeCard(Card card, Requirement requirement)
    + void buyPackage(Package newPackage)
    + void selectBestCards()
    + void register()
    + void login()
    + void viewScores()
    + void viewProfile()
    + void editProfile()
    + void requestTrade(Card card, Requirement requirement)
    + void acceptTrade(TradeDeal tradeDeal)
}

class Store {
    - tradeDeals: TradeDeal[]
    + void addTradeDeal(TradeDeal tradeDeal)
    + void removeTradeDeal(TradeDeal tradeDeal)
    + void displayAvailableTrades()
}

class TradeDeal {
    - offeringUser: User
    - offeredCard: Card
    - requirement: Requirement
    + void acceptDeal(User acceptingUser)
    + void rejectDeal()
}

class Profile {
    - name : String
    - email : String
    - otherDetails : String
    + void displayProfile()
    + void updateStatus()
}

class Card {
    # name : String
    # damage : Integer
    # elementType: String
    # specialties: String[]
    # cardType: CardType
    # owner: User
    + void getAttributes()
    + void displayCardInfo()
    + void upgradeCard()
    + void calculateEffectiveDamage(ElementType opponentElementType, CardType opponentCardType)
    + void applySpecialty(String specialty, Card opponentCard)
    + boolean containsSpecialty(String[] specialties, String specialtyToFind)
    + String specialtiesToString()
}

class SpellCard {
    + void castSpell()
    + void getAttributes()
    + void displayCardInfo()
    + void upgradeCard()
    + void applySpecialty(String specialty, Card opponentCard)
    + void calculateEffectiveDamage(ElementType opponentElementType, CardType opponentCardType)
}

class MonsterCard {
    + void evolve()
    + void getAttributes()
    + void displayCardInfo()
    + void upgradeCard()
    + void applySpecialty(String specialty, Card opponentCard)
    + void calculateEffectiveDamage(ElementType opponentElementType, CardType opponentCardType)
}

class Stack{
    - stackCards: Card[]
    + void removeCard(Card card)
    + void attainCard(Card card)
    + void shuffleCards()
    + void organizeByElement()
    + void getStackCards()
}

class Package {
    - packageCards: Card[5]
    + void openPackage()
    + void getPackageCards()
    + void displayPackageInfo()
    + void applyDiscount()
}

class Deck {
    - bestCards: Card[4]
    + void addCardToDeck(Card card)
    + void removeCardFromDeck(Card card)
    + void reorganizeDeck()
    + void getBestCards()
}

enum ElementType {
    WATER
    FIRE
    NORMAL
}

class Requirement {
    - cardType: CardType
    - minDamage: Integer
    + satisfiesRequirement(Card card)
}

enum CardType {
    MONSTER
    SPELL
}

class Battle {
    - user1: User
    - user2: User
    - battleLog: BattleLog
    + void startBattle()
    + void endBattle()
    + void displayBattleResults()
}

class GameController {
    - users: User[]
    - battles: Battle[]
    + void createUser(String username, String password)
    + void initiateBattle(User user1, User user2)
}

class BattleLog {
    - rounds: Round[]
    - outcome: String
    + void logRound(Round round)
    + void setOutcome(String outcome)
}

class Round {
    - cardsPlayed: Card[2]
    - winner: User
    - draw: boolean
    + void determineRoundOutcome()
}

class BattleResult {
    - opponent: User
    - outcome: String
}

Card <|-- MonsterCard
Card <|-- SpellCard

User "1" -- "1..*" Card : owns
User "1" -- "1" Deck : has
User "1" -- "1..*" Package : canAcquire
User "1" -- "1" Stack : has
User "1" -- "1" Profile : has
User "1" -- "0..*" BattleResult : has

Stack "1" o-- "1..*" Card : contains
Package "1" o-- "1..*" Card : contains
Deck "1" o-- "1..*" Card : contains

Battle "1" o-- "*" Deck : isFoughtWith
Battle "1" o-- "2" User : isFoughtBy
Battle "1" -- "1" BattleLog : has

GameController "1" o-- "1..*" User : manages
GameController "1" o-- "1..*" Battle : manages

Card -- ElementType : has
Card -- Requirement : has
Requirement -- CardType : has

Round -- Card : includes
Round -- User : includes
Round -- Battle : belongs to

TradeDeal -- User : offeringUser
TradeDeal -- Card : offeredCard
TradeDeal -- Requirement : requirement

Store "1" -- "0..*" TradeDeal : tradeDeals

User "1" -- "0..*" TradeDeal : initiatedTrades
User "1" -- "0..*" TradeDeal : acceptedTrades

@enduml
